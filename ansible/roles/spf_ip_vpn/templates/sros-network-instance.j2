{% for customer_site in l3vpn_svc.sites.site %}{# f-001: looping all customer sites in service request #}
{% for customer_connection in customer_site.site_network_accesses.site_network_access %}{# f-002: looping all customer connections on site #}
{% for sp_pop_site in pe_to_location %}{# f-003: looping all SP sites with PEs #}
{% if sp_pop_site.location_id == customer_connection.location_reference and sp_pop_site.pe_id == inventory_hostname %}{# i-001: defining PE hostname based on location-id in ietf-l3vpn-svc request #}
<config>
    <configure xmlns="urn:nokia.com:sros:ns:yang:sr:conf">
        <service>
            <vprn>
                <service-name>{{ customer_connection.vpn_attachment.vpn_id }}</service-name>
                <auto-bind-tunnel>
                    <resolution>filter</resolution>
                    <resolution-filter>
                        <sr-isis>true</sr-isis>
                    </resolution-filter>
                </auto-bind-tunnel>
{% for routing_protocol in routing %}{# f-004: looping routing protocols configuration from underlay #}
{% if routing_protocol.id == 'BGP' %}{# i-002: looking for BGP config #}
                <autonomous-system>{{ routing_protocol.asn }}</autonomous-system>
                <route-distinguisher>{{ routing_protocol.asn }}:{{ l3vpn_defaults.route_distinguisher.start + l3vpn_index_next_free }}</route-distinguisher>
                <vrf-target>
                    <community>target:{{ routing_protocol.asn }}:{{ l3vpn_defaults.route_distinguisher.start + l3vpn_index_next_free }}</community>
                </vrf-target>
{% endif %}{# i-002: looking for BGP config #}
{% endfor %}{# f-004: looping routing protocols configuration from underlay #}
{% for cust_routing_protocol in customer_site.routing_protocols.routing_protocol %}{# f-005: looping for all customer routing protocols within ietf-l3vpn-svc request #}
{% if cust_routing_protocol.type == 'bgp' %}{# i-003: matching customer routing protocol type #}
            <bgp>
{% for afi_name in cust_routing_protocol.bgp.address_family %}{# f-005: creating missing AFI within VRF context in BGP process #}
                <group>
                    <group-name>CE_{{ afi_name }}</group-name>
                    <peer-as>{{ cust_routing_protocol.bgp.autonomous_system }}</peer-as>
                    <family>
                        <{{ afi_name }}>true</{{ afi_name }}>
                    </family>
                    <export>
                        <policy>RP_PASS_ALL</policy>
                    </export>
                </group>
                <neighbor>
{% if afi_name == 'ipv4' %}{# i-004: creating AFI for IPv4 or IPv6 UNICAST #}
                    <ip-address>{{ customer_connection.ip_connection.ipv4.addresses.customer_address }}</ip-address>
{% elif afi_name == 'ipv6' %}{# i-004: creating AFI for IPv4 or IPv6 UNICAST #}
                    <ip-address>{{ customer_connection.ip_connection.ipv6.addresses.customer_address }}</ip-address>
{% endif %}{# i-004: creating AFI for IPv4 or IPv6 UNICAST #}
                    <group>CE_{{ afi_name }}</group>
                </neighbor>
{% endfor %}{# f-005: creating missing AFI within VRF context in BGP process #}
            </bgp>
{% endif %}{# i-003: matching customer routing protocol type #}
{% endfor %}{# f-005: looping for all customer routing protocols within ietf-l3vpn-svc request #}
            </vprn>
        </service>
    </configure>
</config>
{% endif %}{# i-001: defining PE hostname based on location-id in ietf-l3vpn-svc request #}
{% endfor %}{# f-003: looping all SP sites with PEs #}
{% endfor %}{# f-002: looping all customer connections on site #}
{% endfor %}{# f-001: looping all customer sites in service request #}
