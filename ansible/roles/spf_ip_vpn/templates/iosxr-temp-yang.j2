{% for customer_site in l3vpn_svc.sites.site %}{# f-001: looping all customer sites in service request #}
{% for customer_connection in customer_site.site_network_accesses.site_network_access %}{# f-002: looping all customer connections on site #}
{% for sp_pop_site in pe_to_location %}{# f-003: looping all SP sites with PEs #}
{% if sp_pop_site.location_id == customer_connection.location_reference and sp_pop_site.pe_id == inventory_hostname %}{# i-001: defining PE hostname based on location-id in ietf-l3vpn-svc request #}
<nc:config xmlns:nc="urn:ietf:params:xml:ns:netconf:base:1.0">
<vrfs xmlns="http://cisco.com/ns/yang/Cisco-IOS-XR-infra-rsi-cfg">
 <vrf>
  <vrf-name>{{ customer_connection.vpn_attachment.vpn_id }}</vrf-name>
  <create/>
  <afs>
{% for cust_routing_protocol in customer_site.routing_protocols.routing_protocol %}{# f-005: looping for all customer routing protocols within ietf-l3vpn-svc request #}
{% if cust_routing_protocol.type == 'bgp' %}{# i-003: matching customer routing protocol type #}
{% for afi_name in cust_routing_protocol.bgp.address_family %}{# f-006: creating missing AFI within VRF context in BGP process #}
   <af>
    <af-name>{{ afi_name }}</af-name>
    <saf-name>unicast</saf-name>
    <topology-name>default</topology-name>
    <create/>
    <bgp xmlns="http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-cfg">
     <import-route-targets>
      <route-targets>
       <route-target>
        <type>as</type>
        <as-or-four-byte-as>
         <as-xx>0</as-xx>
{% for routing_protocol in routing %}{# f-004: looping routing protocols configuration from underlay #}
{% if routing_protocol.id == 'BGP' %}{# i-002: looking for BGP config #}
         <as>{{ routing_protocol.asn }}</as>
{% endif %}{# i-002: looking for BGP config #}
{% endfor %}{# f-004: looping routing protocols configuration from underlay #}
         <as-index>{{ l3vpn_defaults.route_distinguisher.start + l3vpn_index_next_free }}</as-index>
         <stitching-rt>0</stitching-rt>
        </as-or-four-byte-as>
       </route-target>
      </route-targets>
     </import-route-targets>
     <export-route-targets>
      <route-targets>
       <route-target>
        <type>as</type>
        <as-or-four-byte-as>
         <as-xx>0</as-xx>
{% for routing_protocol in routing %}{# f-004: looping routing protocols configuration from underlay #}
{% if routing_protocol.id == 'BGP' %}{# i-002: looking for BGP config #}
         <as>{{ routing_protocol.asn }}</as>
{% endif %}{# i-002: looking for BGP config #}
{% endfor %}{# f-004: looping routing protocols configuration from underlay #}
         <as-index>{{ l3vpn_defaults.route_distinguisher.start + l3vpn_index_next_free }}</as-index>
         <stitching-rt>0</stitching-rt>
        </as-or-four-byte-as>
       </route-target>
      </route-targets>
     </export-route-targets>
    </bgp>
   </af>
{% endfor %}{# f-006: creating missing AFI within VRF context in BGP process #}
{% endif %}{# i-003: matching customer routing protocol type #}
{% endfor %}{# f-005: looping for all customer routing protocols within ietf-l3vpn-svc request #}
  </afs>
 </vrf>
</vrfs>


{% for cust_routing_protocol in customer_site.routing_protocols.routing_protocol %}{# f-007: looping for all customer routing protocols within ietf-l3vpn-svc request #}
{% if cust_routing_protocol.type == 'bgp' %}{# i-004: matching customer routing protocol type #}
<bgp xmlns="http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-cfg">
 <instance>
  <instance-name>default</instance-name>
  <instance-as>
   <as>0</as>
   <four-byte-as>
{% for routing_protocol in routing %}{# f-009: looping routing protocols configuration from underlay #}
{% if routing_protocol.id == 'BGP' %}{# i-005: looking for BGP config #}
    <as>{{ routing_protocol.asn }}</as>
{% endif %}{# i-005: looking for BGP config #}
{% endfor %}{# f-009: looping routing protocols configuration from underlay #}
    <vrfs>
     <vrf>
      <vrf-name>{{ customer_connection.vpn_attachment.vpn_id }}</vrf-name>
      <vrf-neighbors>
{% for afi_name in cust_routing_protocol.bgp.address_family %}{# f-008: creating missing AFI within VRF context in BGP process #}
       <vrf-neighbor>
{% if afi_name == 'ipv4' %}{# i-006: creating AFI for IPv4 or IPv6 UNICAST #}
        <neighbor-address>{{ customer_connection.ip_connection.ipv4.addresses.customer_address }}</neighbor-address>
{% elif afi_name == 'ipv6' %}{# i-006: creating AFI for IPv4 or IPv6 UNICAST #}
        <neighbor-address>{{ customer_connection.ip_connection.ipv6.addresses.customer_address }}</neighbor-address>
{% endif %}{# i-006: creating AFI for IPv4 or IPv6 UNICAST #}
        <vrf-neighbor-afs>
         <vrf-neighbor-af>
          <af-name>{{ afi_name }}-unicast</af-name>
          <as-override>true</as-override>
         </vrf-neighbor-af>
        </vrf-neighbor-afs>
       </vrf-neighbor>
{% endfor %}{# f-008: creating missing AFI within VRF context in BGP process #}
      </vrf-neighbors>
     </vrf>
    </vrfs>
   </four-byte-as>
  </instance-as>
 </instance>
</bgp>
{% endif %}{# i-004: matching customer routing protocol type #}
{% endfor %}{# f-007: looping for all customer routing protocols within ietf-l3vpn-svc request #}

</nc:config>
{% endif %}{# i-001: defining PE hostname based on location-id in ietf-l3vpn-svc request #}
{% endfor %}{# f-003: looping all SP sites with PEs #}
{% endfor %}{# f-002: looping all customer connections on site #}
{% endfor %}{# f-001: looping all customer sites in service request #}
